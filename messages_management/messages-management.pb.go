// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-management.proto

/*
Package hw_trezor_messages_management is a generated protocol buffer package.

It is generated from these files:
	messages-management.proto

It has these top-level messages:
	Initialize
	GetFeatures
	Features
	ClearSession
	ApplySettings
	ApplyFlags
	ChangePin
	Ping
	Cancel
	GetEntropy
	Entropy
	WipeDevice
	LoadDevice
	ResetDevice
	BackupDevice
	EntropyRequest
	EntropyAck
	RecoveryDevice
	WordRequest
	WordAck
	SetU2FCounter
*/
package messages_management

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hw_trezor_messages_common "github.com/tranvictor/trezoreum/messages_common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Structure representing passphrase source
type ApplySettings_PassphraseSourceType int32

const (
	ApplySettings_ASK    ApplySettings_PassphraseSourceType = 0
	ApplySettings_DEVICE ApplySettings_PassphraseSourceType = 1
	ApplySettings_HOST   ApplySettings_PassphraseSourceType = 2
)

var ApplySettings_PassphraseSourceType_name = map[int32]string{
	0: "ASK",
	1: "DEVICE",
	2: "HOST",
}
var ApplySettings_PassphraseSourceType_value = map[string]int32{
	"ASK":    0,
	"DEVICE": 1,
	"HOST":   2,
}

func (x ApplySettings_PassphraseSourceType) Enum() *ApplySettings_PassphraseSourceType {
	p := new(ApplySettings_PassphraseSourceType)
	*p = x
	return p
}
func (x ApplySettings_PassphraseSourceType) String() string {
	return proto.EnumName(ApplySettings_PassphraseSourceType_name, int32(x))
}
func (x *ApplySettings_PassphraseSourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ApplySettings_PassphraseSourceType_value, data, "ApplySettings_PassphraseSourceType")
	if err != nil {
		return err
	}
	*x = ApplySettings_PassphraseSourceType(value)
	return nil
}
func (ApplySettings_PassphraseSourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

// *
// Type of recovery procedure. These should be used as bitmask, e.g.,
// `RecoveryDeviceType_ScrambledWords | RecoveryDeviceType_Matrix`
// listing every method supported by the host computer.
//
// Note that ScrambledWords must be supported by every implementation
// for backward compatibility; there is no way to not support it.
type RecoveryDevice_RecoveryDeviceType int32

const (
	// use powers of two when extending this field
	RecoveryDevice_RecoveryDeviceType_ScrambledWords RecoveryDevice_RecoveryDeviceType = 0
	RecoveryDevice_RecoveryDeviceType_Matrix         RecoveryDevice_RecoveryDeviceType = 1
)

var RecoveryDevice_RecoveryDeviceType_name = map[int32]string{
	0: "RecoveryDeviceType_ScrambledWords",
	1: "RecoveryDeviceType_Matrix",
}
var RecoveryDevice_RecoveryDeviceType_value = map[string]int32{
	"RecoveryDeviceType_ScrambledWords": 0,
	"RecoveryDeviceType_Matrix":         1,
}

func (x RecoveryDevice_RecoveryDeviceType) Enum() *RecoveryDevice_RecoveryDeviceType {
	p := new(RecoveryDevice_RecoveryDeviceType)
	*p = x
	return p
}
func (x RecoveryDevice_RecoveryDeviceType) String() string {
	return proto.EnumName(RecoveryDevice_RecoveryDeviceType_name, int32(x))
}
func (x *RecoveryDevice_RecoveryDeviceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecoveryDevice_RecoveryDeviceType_value, data, "RecoveryDevice_RecoveryDeviceType")
	if err != nil {
		return err
	}
	*x = RecoveryDevice_RecoveryDeviceType(value)
	return nil
}
func (RecoveryDevice_RecoveryDeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

// *
// Type of Recovery Word request
type WordRequest_WordRequestType int32

const (
	WordRequest_WordRequestType_Plain   WordRequest_WordRequestType = 0
	WordRequest_WordRequestType_Matrix9 WordRequest_WordRequestType = 1
	WordRequest_WordRequestType_Matrix6 WordRequest_WordRequestType = 2
)

var WordRequest_WordRequestType_name = map[int32]string{
	0: "WordRequestType_Plain",
	1: "WordRequestType_Matrix9",
	2: "WordRequestType_Matrix6",
}
var WordRequest_WordRequestType_value = map[string]int32{
	"WordRequestType_Plain":   0,
	"WordRequestType_Matrix9": 1,
	"WordRequestType_Matrix6": 2,
}

func (x WordRequest_WordRequestType) Enum() *WordRequest_WordRequestType {
	p := new(WordRequest_WordRequestType)
	*p = x
	return p
}
func (x WordRequest_WordRequestType) String() string {
	return proto.EnumName(WordRequest_WordRequestType_name, int32(x))
}
func (x *WordRequest_WordRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WordRequest_WordRequestType_value, data, "WordRequest_WordRequestType")
	if err != nil {
		return err
	}
	*x = WordRequest_WordRequestType(value)
	return nil
}
func (WordRequest_WordRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18, 0}
}

// *
// Request: Reset device to default state and ask for device details
// @start
// @next Features
type Initialize struct {
	State            []byte `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	SkipPassphrase   *bool  `protobuf:"varint,2,opt,name=skip_passphrase,json=skipPassphrase" json:"skip_passphrase,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Initialize) Reset()                    { *m = Initialize{} }
func (m *Initialize) String() string            { return proto.CompactTextString(m) }
func (*Initialize) ProtoMessage()               {}
func (*Initialize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Initialize) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Initialize) GetSkipPassphrase() bool {
	if m != nil && m.SkipPassphrase != nil {
		return *m.SkipPassphrase
	}
	return false
}

// *
// Request: Ask for device details (no device reset)
// @start
// @next Features
type GetFeatures struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetFeatures) Reset()                    { *m = GetFeatures{} }
func (m *GetFeatures) String() string            { return proto.CompactTextString(m) }
func (*GetFeatures) ProtoMessage()               {}
func (*GetFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Response: Reports various information about the device
// @end
type Features struct {
	Vendor               *string `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`
	MajorVersion         *uint32 `protobuf:"varint,2,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	MinorVersion         *uint32 `protobuf:"varint,3,opt,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`
	PatchVersion         *uint32 `protobuf:"varint,4,opt,name=patch_version,json=patchVersion" json:"patch_version,omitempty"`
	BootloaderMode       *bool   `protobuf:"varint,5,opt,name=bootloader_mode,json=bootloaderMode" json:"bootloader_mode,omitempty"`
	DeviceId             *string `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	PinProtection        *bool   `protobuf:"varint,7,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,8,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,10,opt,name=label" json:"label,omitempty"`
	Initialized          *bool   `protobuf:"varint,12,opt,name=initialized" json:"initialized,omitempty"`
	Revision             []byte  `protobuf:"bytes,13,opt,name=revision" json:"revision,omitempty"`
	BootloaderHash       []byte  `protobuf:"bytes,14,opt,name=bootloader_hash,json=bootloaderHash" json:"bootloader_hash,omitempty"`
	Imported             *bool   `protobuf:"varint,15,opt,name=imported" json:"imported,omitempty"`
	PinCached            *bool   `protobuf:"varint,16,opt,name=pin_cached,json=pinCached" json:"pin_cached,omitempty"`
	PassphraseCached     *bool   `protobuf:"varint,17,opt,name=passphrase_cached,json=passphraseCached" json:"passphrase_cached,omitempty"`
	FirmwarePresent      *bool   `protobuf:"varint,18,opt,name=firmware_present,json=firmwarePresent" json:"firmware_present,omitempty"`
	NeedsBackup          *bool   `protobuf:"varint,19,opt,name=needs_backup,json=needsBackup" json:"needs_backup,omitempty"`
	Flags                *uint32 `protobuf:"varint,20,opt,name=flags" json:"flags,omitempty"`
	Model                *string `protobuf:"bytes,21,opt,name=model" json:"model,omitempty"`
	FwMajor              *uint32 `protobuf:"varint,22,opt,name=fw_major,json=fwMajor" json:"fw_major,omitempty"`
	FwMinor              *uint32 `protobuf:"varint,23,opt,name=fw_minor,json=fwMinor" json:"fw_minor,omitempty"`
	FwPatch              *uint32 `protobuf:"varint,24,opt,name=fw_patch,json=fwPatch" json:"fw_patch,omitempty"`
	FwVendor             *string `protobuf:"bytes,25,opt,name=fw_vendor,json=fwVendor" json:"fw_vendor,omitempty"`
	FwVendorKeys         []byte  `protobuf:"bytes,26,opt,name=fw_vendor_keys,json=fwVendorKeys" json:"fw_vendor_keys,omitempty"`
	UnfinishedBackup     *bool   `protobuf:"varint,27,opt,name=unfinished_backup,json=unfinishedBackup" json:"unfinished_backup,omitempty"`
	NoBackup             *bool   `protobuf:"varint,28,opt,name=no_backup,json=noBackup" json:"no_backup,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Features) Reset()                    { *m = Features{} }
func (m *Features) String() string            { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()               {}
func (*Features) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Features) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *Features) GetMajorVersion() uint32 {
	if m != nil && m.MajorVersion != nil {
		return *m.MajorVersion
	}
	return 0
}

func (m *Features) GetMinorVersion() uint32 {
	if m != nil && m.MinorVersion != nil {
		return *m.MinorVersion
	}
	return 0
}

func (m *Features) GetPatchVersion() uint32 {
	if m != nil && m.PatchVersion != nil {
		return *m.PatchVersion
	}
	return 0
}

func (m *Features) GetBootloaderMode() bool {
	if m != nil && m.BootloaderMode != nil {
		return *m.BootloaderMode
	}
	return false
}

func (m *Features) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *Features) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Features) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *Features) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Features) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Features) GetInitialized() bool {
	if m != nil && m.Initialized != nil {
		return *m.Initialized
	}
	return false
}

func (m *Features) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Features) GetBootloaderHash() []byte {
	if m != nil {
		return m.BootloaderHash
	}
	return nil
}

func (m *Features) GetImported() bool {
	if m != nil && m.Imported != nil {
		return *m.Imported
	}
	return false
}

func (m *Features) GetPinCached() bool {
	if m != nil && m.PinCached != nil {
		return *m.PinCached
	}
	return false
}

func (m *Features) GetPassphraseCached() bool {
	if m != nil && m.PassphraseCached != nil {
		return *m.PassphraseCached
	}
	return false
}

func (m *Features) GetFirmwarePresent() bool {
	if m != nil && m.FirmwarePresent != nil {
		return *m.FirmwarePresent
	}
	return false
}

func (m *Features) GetNeedsBackup() bool {
	if m != nil && m.NeedsBackup != nil {
		return *m.NeedsBackup
	}
	return false
}

func (m *Features) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *Features) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *Features) GetFwMajor() uint32 {
	if m != nil && m.FwMajor != nil {
		return *m.FwMajor
	}
	return 0
}

func (m *Features) GetFwMinor() uint32 {
	if m != nil && m.FwMinor != nil {
		return *m.FwMinor
	}
	return 0
}

func (m *Features) GetFwPatch() uint32 {
	if m != nil && m.FwPatch != nil {
		return *m.FwPatch
	}
	return 0
}

func (m *Features) GetFwVendor() string {
	if m != nil && m.FwVendor != nil {
		return *m.FwVendor
	}
	return ""
}

func (m *Features) GetFwVendorKeys() []byte {
	if m != nil {
		return m.FwVendorKeys
	}
	return nil
}

func (m *Features) GetUnfinishedBackup() bool {
	if m != nil && m.UnfinishedBackup != nil {
		return *m.UnfinishedBackup
	}
	return false
}

func (m *Features) GetNoBackup() bool {
	if m != nil && m.NoBackup != nil {
		return *m.NoBackup
	}
	return false
}

// *
// Request: clear session (removes cached PIN, passphrase, etc).
// @start
// @next Success
type ClearSession struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClearSession) Reset()                    { *m = ClearSession{} }
func (m *ClearSession) String() string            { return proto.CompactTextString(m) }
func (*ClearSession) ProtoMessage()               {}
func (*ClearSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// Request: change language and/or label of the device
// @start
// @next Success
// @next Failure
type ApplySettings struct {
	Language         *string                             `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Label            *string                             `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	UsePassphrase    *bool                               `protobuf:"varint,3,opt,name=use_passphrase,json=usePassphrase" json:"use_passphrase,omitempty"`
	Homescreen       []byte                              `protobuf:"bytes,4,opt,name=homescreen" json:"homescreen,omitempty"`
	PassphraseSource *ApplySettings_PassphraseSourceType `protobuf:"varint,5,opt,name=passphrase_source,json=passphraseSource,enum=hw.trezor.messages.management.ApplySettings_PassphraseSourceType" json:"passphrase_source,omitempty"`
	AutoLockDelayMs  *uint32                             `protobuf:"varint,6,opt,name=auto_lock_delay_ms,json=autoLockDelayMs" json:"auto_lock_delay_ms,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *ApplySettings) Reset()                    { *m = ApplySettings{} }
func (m *ApplySettings) String() string            { return proto.CompactTextString(m) }
func (*ApplySettings) ProtoMessage()               {}
func (*ApplySettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApplySettings) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *ApplySettings) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ApplySettings) GetUsePassphrase() bool {
	if m != nil && m.UsePassphrase != nil {
		return *m.UsePassphrase
	}
	return false
}

func (m *ApplySettings) GetHomescreen() []byte {
	if m != nil {
		return m.Homescreen
	}
	return nil
}

func (m *ApplySettings) GetPassphraseSource() ApplySettings_PassphraseSourceType {
	if m != nil && m.PassphraseSource != nil {
		return *m.PassphraseSource
	}
	return ApplySettings_ASK
}

func (m *ApplySettings) GetAutoLockDelayMs() uint32 {
	if m != nil && m.AutoLockDelayMs != nil {
		return *m.AutoLockDelayMs
	}
	return 0
}

// *
// Request: set flags of the device
// @start
// @next Success
// @next Failure
type ApplyFlags struct {
	Flags            *uint32 `protobuf:"varint,1,opt,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApplyFlags) Reset()                    { *m = ApplyFlags{} }
func (m *ApplyFlags) String() string            { return proto.CompactTextString(m) }
func (*ApplyFlags) ProtoMessage()               {}
func (*ApplyFlags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ApplyFlags) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

// *
// Request: Starts workflow for setting/changing/removing the PIN
// @start
// @next Success
// @next Failure
type ChangePin struct {
	Remove           *bool  `protobuf:"varint,1,opt,name=remove" json:"remove,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChangePin) Reset()                    { *m = ChangePin{} }
func (m *ChangePin) String() string            { return proto.CompactTextString(m) }
func (*ChangePin) ProtoMessage()               {}
func (*ChangePin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ChangePin) GetRemove() bool {
	if m != nil && m.Remove != nil {
		return *m.Remove
	}
	return false
}

// *
// Request: Test if the device is alive, device sends back the message in Success response
// @start
// @next Success
type Ping struct {
	Message              *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ButtonProtection     *bool   `protobuf:"varint,2,opt,name=button_protection,json=buttonProtection" json:"button_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Ping) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Ping) GetButtonProtection() bool {
	if m != nil && m.ButtonProtection != nil {
		return *m.ButtonProtection
	}
	return false
}

func (m *Ping) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *Ping) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

// *
// Request: Abort last operation that required user interaction
// @start
// @next Failure
type Cancel struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Cancel) Reset()                    { *m = Cancel{} }
func (m *Cancel) String() string            { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()               {}
func (*Cancel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// *
// Request: Request a sample of random data generated by hardware RNG. May be used for testing.
// @start
// @next Entropy
// @next Failure
type GetEntropy struct {
	Size             *uint32 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetEntropy) Reset()                    { *m = GetEntropy{} }
func (m *GetEntropy) String() string            { return proto.CompactTextString(m) }
func (*GetEntropy) ProtoMessage()               {}
func (*GetEntropy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetEntropy) GetSize() uint32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// *
// Response: Reply with random data generated by internal RNG
// @end
type Entropy struct {
	Entropy          []byte `protobuf:"bytes,1,req,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Entropy) Reset()                    { *m = Entropy{} }
func (m *Entropy) String() string            { return proto.CompactTextString(m) }
func (*Entropy) ProtoMessage()               {}
func (*Entropy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Entropy) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Request device to wipe all sensitive data and settings
// @start
// @next Success
// @next Failure
type WipeDevice struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *WipeDevice) Reset()                    { *m = WipeDevice{} }
func (m *WipeDevice) String() string            { return proto.CompactTextString(m) }
func (*WipeDevice) ProtoMessage()               {}
func (*WipeDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// *
// Request: Load seed and related internal settings from the computer
// @start
// @next Success
// @next Failure
type LoadDevice struct {
	Mnemonic             *string                               `protobuf:"bytes,1,opt,name=mnemonic" json:"mnemonic,omitempty"`
	Node                 *hw_trezor_messages_common.HDNodeType `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Pin                  *string                               `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`
	PassphraseProtection *bool                                 `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	Language             *string                               `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string                               `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	SkipChecksum         *bool                                 `protobuf:"varint,7,opt,name=skip_checksum,json=skipChecksum" json:"skip_checksum,omitempty"`
	U2FCounter           *uint32                               `protobuf:"varint,8,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	XXX_unrecognized     []byte                                `json:"-"`
}

func (m *LoadDevice) Reset()                    { *m = LoadDevice{} }
func (m *LoadDevice) String() string            { return proto.CompactTextString(m) }
func (*LoadDevice) ProtoMessage()               {}
func (*LoadDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

const Default_LoadDevice_Language string = "english"

func (m *LoadDevice) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *LoadDevice) GetNode() *hw_trezor_messages_common.HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *LoadDevice) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *LoadDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *LoadDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_LoadDevice_Language
}

func (m *LoadDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *LoadDevice) GetSkipChecksum() bool {
	if m != nil && m.SkipChecksum != nil {
		return *m.SkipChecksum
	}
	return false
}

func (m *LoadDevice) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

// *
// Request: Ask device to do initialization involving user interaction
// @start
// @next EntropyRequest
// @next Failure
type ResetDevice struct {
	DisplayRandom        *bool   `protobuf:"varint,1,opt,name=display_random,json=displayRandom" json:"display_random,omitempty"`
	Strength             *uint32 `protobuf:"varint,2,opt,name=strength,def=256" json:"strength,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,3,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,4,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,5,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	U2FCounter           *uint32 `protobuf:"varint,7,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	SkipBackup           *bool   `protobuf:"varint,8,opt,name=skip_backup,json=skipBackup" json:"skip_backup,omitempty"`
	NoBackup             *bool   `protobuf:"varint,9,opt,name=no_backup,json=noBackup" json:"no_backup,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *ResetDevice) Reset()                    { *m = ResetDevice{} }
func (m *ResetDevice) String() string            { return proto.CompactTextString(m) }
func (*ResetDevice) ProtoMessage()               {}
func (*ResetDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

const Default_ResetDevice_Strength uint32 = 256
const Default_ResetDevice_Language string = "english"

func (m *ResetDevice) GetDisplayRandom() bool {
	if m != nil && m.DisplayRandom != nil {
		return *m.DisplayRandom
	}
	return false
}

func (m *ResetDevice) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return Default_ResetDevice_Strength
}

func (m *ResetDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *ResetDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *ResetDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_ResetDevice_Language
}

func (m *ResetDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *ResetDevice) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

func (m *ResetDevice) GetSkipBackup() bool {
	if m != nil && m.SkipBackup != nil {
		return *m.SkipBackup
	}
	return false
}

func (m *ResetDevice) GetNoBackup() bool {
	if m != nil && m.NoBackup != nil {
		return *m.NoBackup
	}
	return false
}

// *
// Request: Perform backup of the device seed if not backed up using ResetDevice
// @start
// @next Success
type BackupDevice struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *BackupDevice) Reset()                    { *m = BackupDevice{} }
func (m *BackupDevice) String() string            { return proto.CompactTextString(m) }
func (*BackupDevice) ProtoMessage()               {}
func (*BackupDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// *
// Response: Ask for additional entropy from host computer
// @next EntropyAck
type EntropyRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyRequest) Reset()                    { *m = EntropyRequest{} }
func (m *EntropyRequest) String() string            { return proto.CompactTextString(m) }
func (*EntropyRequest) ProtoMessage()               {}
func (*EntropyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// *
// Request: Provide additional entropy for seed generation function
// @next Success
type EntropyAck struct {
	Entropy          []byte `protobuf:"bytes,1,opt,name=entropy" json:"entropy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EntropyAck) Reset()                    { *m = EntropyAck{} }
func (m *EntropyAck) String() string            { return proto.CompactTextString(m) }
func (*EntropyAck) ProtoMessage()               {}
func (*EntropyAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EntropyAck) GetEntropy() []byte {
	if m != nil {
		return m.Entropy
	}
	return nil
}

// *
// Request: Start recovery workflow asking user for specific words of mnemonic
// Used to recovery device safely even on untrusted computer.
// @start
// @next WordRequest
type RecoveryDevice struct {
	WordCount            *uint32 `protobuf:"varint,1,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`
	PassphraseProtection *bool   `protobuf:"varint,2,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinProtection        *bool   `protobuf:"varint,3,opt,name=pin_protection,json=pinProtection" json:"pin_protection,omitempty"`
	Language             *string `protobuf:"bytes,4,opt,name=language,def=english" json:"language,omitempty"`
	Label                *string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	EnforceWordlist      *bool   `protobuf:"varint,6,opt,name=enforce_wordlist,json=enforceWordlist" json:"enforce_wordlist,omitempty"`
	// 7 reserved for unused recovery method
	Type             *RecoveryDevice_RecoveryDeviceType `protobuf:"varint,8,opt,name=type,enum=hw.trezor.messages.management.RecoveryDevice_RecoveryDeviceType" json:"type,omitempty"`
	U2FCounter       *uint32                            `protobuf:"varint,9,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	DryRun           *bool                              `protobuf:"varint,10,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *RecoveryDevice) Reset()                    { *m = RecoveryDevice{} }
func (m *RecoveryDevice) String() string            { return proto.CompactTextString(m) }
func (*RecoveryDevice) ProtoMessage()               {}
func (*RecoveryDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

const Default_RecoveryDevice_Language string = "english"

func (m *RecoveryDevice) GetWordCount() uint32 {
	if m != nil && m.WordCount != nil {
		return *m.WordCount
	}
	return 0
}

func (m *RecoveryDevice) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *RecoveryDevice) GetPinProtection() bool {
	if m != nil && m.PinProtection != nil {
		return *m.PinProtection
	}
	return false
}

func (m *RecoveryDevice) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_RecoveryDevice_Language
}

func (m *RecoveryDevice) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *RecoveryDevice) GetEnforceWordlist() bool {
	if m != nil && m.EnforceWordlist != nil {
		return *m.EnforceWordlist
	}
	return false
}

func (m *RecoveryDevice) GetType() RecoveryDevice_RecoveryDeviceType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RecoveryDevice_RecoveryDeviceType_ScrambledWords
}

func (m *RecoveryDevice) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

func (m *RecoveryDevice) GetDryRun() bool {
	if m != nil && m.DryRun != nil {
		return *m.DryRun
	}
	return false
}

// *
// Response: Device is waiting for user to enter word of the mnemonic
// Its position is shown only on device's internal display.
// @next WordAck
type WordRequest struct {
	Type             *WordRequest_WordRequestType `protobuf:"varint,1,opt,name=type,enum=hw.trezor.messages.management.WordRequest_WordRequestType" json:"type,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *WordRequest) Reset()                    { *m = WordRequest{} }
func (m *WordRequest) String() string            { return proto.CompactTextString(m) }
func (*WordRequest) ProtoMessage()               {}
func (*WordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *WordRequest) GetType() WordRequest_WordRequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return WordRequest_WordRequestType_Plain
}

// *
// Request: Computer replies with word from the mnemonic
// @next WordRequest
// @next Success
// @next Failure
type WordAck struct {
	Word             *string `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WordAck) Reset()                    { *m = WordAck{} }
func (m *WordAck) String() string            { return proto.CompactTextString(m) }
func (*WordAck) ProtoMessage()               {}
func (*WordAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *WordAck) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

// *
// Request: Set U2F counter
// @start
// @next Success
type SetU2FCounter struct {
	U2FCounter       *uint32 `protobuf:"varint,1,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetU2FCounter) Reset()                    { *m = SetU2FCounter{} }
func (m *SetU2FCounter) String() string            { return proto.CompactTextString(m) }
func (*SetU2FCounter) ProtoMessage()               {}
func (*SetU2FCounter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SetU2FCounter) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*Initialize)(nil), "hw.trezor.messages.management.Initialize")
	proto.RegisterType((*GetFeatures)(nil), "hw.trezor.messages.management.GetFeatures")
	proto.RegisterType((*Features)(nil), "hw.trezor.messages.management.Features")
	proto.RegisterType((*ClearSession)(nil), "hw.trezor.messages.management.ClearSession")
	proto.RegisterType((*ApplySettings)(nil), "hw.trezor.messages.management.ApplySettings")
	proto.RegisterType((*ApplyFlags)(nil), "hw.trezor.messages.management.ApplyFlags")
	proto.RegisterType((*ChangePin)(nil), "hw.trezor.messages.management.ChangePin")
	proto.RegisterType((*Ping)(nil), "hw.trezor.messages.management.Ping")
	proto.RegisterType((*Cancel)(nil), "hw.trezor.messages.management.Cancel")
	proto.RegisterType((*GetEntropy)(nil), "hw.trezor.messages.management.GetEntropy")
	proto.RegisterType((*Entropy)(nil), "hw.trezor.messages.management.Entropy")
	proto.RegisterType((*WipeDevice)(nil), "hw.trezor.messages.management.WipeDevice")
	proto.RegisterType((*LoadDevice)(nil), "hw.trezor.messages.management.LoadDevice")
	proto.RegisterType((*ResetDevice)(nil), "hw.trezor.messages.management.ResetDevice")
	proto.RegisterType((*BackupDevice)(nil), "hw.trezor.messages.management.BackupDevice")
	proto.RegisterType((*EntropyRequest)(nil), "hw.trezor.messages.management.EntropyRequest")
	proto.RegisterType((*EntropyAck)(nil), "hw.trezor.messages.management.EntropyAck")
	proto.RegisterType((*RecoveryDevice)(nil), "hw.trezor.messages.management.RecoveryDevice")
	proto.RegisterType((*WordRequest)(nil), "hw.trezor.messages.management.WordRequest")
	proto.RegisterType((*WordAck)(nil), "hw.trezor.messages.management.WordAck")
	proto.RegisterType((*SetU2FCounter)(nil), "hw.trezor.messages.management.SetU2FCounter")
	proto.RegisterEnum("hw.trezor.messages.management.ApplySettings_PassphraseSourceType", ApplySettings_PassphraseSourceType_name, ApplySettings_PassphraseSourceType_value)
	proto.RegisterEnum("hw.trezor.messages.management.RecoveryDevice_RecoveryDeviceType", RecoveryDevice_RecoveryDeviceType_name, RecoveryDevice_RecoveryDeviceType_value)
	proto.RegisterEnum("hw.trezor.messages.management.WordRequest_WordRequestType", WordRequest_WordRequestType_name, WordRequest_WordRequestType_value)
}

func init() { proto.RegisterFile("messages-management.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0x1b, 0x37,
	0x16, 0x8e, 0x7e, 0x62, 0x49, 0xc7, 0x92, 0xac, 0x70, 0xed, 0x78, 0x1c, 0xaf, 0x37, 0xce, 0x78,
	0xbd, 0x49, 0x10, 0xac, 0xb0, 0xf0, 0x22, 0x01, 0x92, 0x8b, 0xa2, 0x8e, 0x9d, 0x3f, 0x24, 0x4e,
	0x8d, 0xb1, 0x9b, 0x00, 0xbd, 0x19, 0x50, 0x33, 0x47, 0x12, 0xeb, 0x19, 0x72, 0x3a, 0xe4, 0xd8,
	0x55, 0x9e, 0xa1, 0x2f, 0x52, 0xf4, 0x39, 0x7a, 0xd5, 0x57, 0x68, 0xdf, 0xa5, 0x20, 0x39, 0x23,
	0x8d, 0x65, 0x3b, 0x46, 0xda, 0x3b, 0x9e, 0xef, 0x7c, 0xe4, 0x90, 0xdf, 0xf9, 0x78, 0x28, 0xc1,
	0x5a, 0x8c, 0x52, 0xd2, 0x11, 0xca, 0xff, 0xc6, 0x94, 0xd3, 0x11, 0xc6, 0xc8, 0x55, 0x3f, 0x49,
	0x85, 0x12, 0x64, 0x63, 0x7c, 0xd6, 0x57, 0x29, 0x7e, 0x12, 0x69, 0xbf, 0x20, 0xf5, 0x67, 0xa4,
	0x3b, 0x2b, 0xd3, 0x99, 0x81, 0x88, 0x63, 0xc1, 0xed, 0x2c, 0xf7, 0x2d, 0xc0, 0x1b, 0xce, 0x14,
	0xa3, 0x11, 0xfb, 0x84, 0x64, 0x19, 0x6e, 0x4a, 0x45, 0x15, 0x3a, 0x95, 0xcd, 0xca, 0x83, 0xb6,
	0x67, 0x03, 0x72, 0x1f, 0x96, 0xe4, 0x09, 0x4b, 0xfc, 0x84, 0x4a, 0x99, 0x8c, 0x53, 0x2a, 0xd1,
	0xa9, 0x6e, 0x56, 0x1e, 0x34, 0xbd, 0xae, 0x86, 0x0f, 0xa7, 0xa8, 0xdb, 0x81, 0xc5, 0x57, 0xa8,
	0x5e, 0x22, 0x55, 0x59, 0x8a, 0xd2, 0xfd, 0xa9, 0x01, 0xcd, 0x22, 0x20, 0xb7, 0x61, 0xe1, 0x14,
	0x79, 0x28, 0x52, 0xb3, 0x76, 0xcb, 0xcb, 0x23, 0xb2, 0x05, 0x9d, 0x98, 0x7e, 0x2f, 0x52, 0xff,
	0x14, 0x53, 0xc9, 0x04, 0x37, 0x4b, 0x77, 0xbc, 0xb6, 0x01, 0x3f, 0x58, 0xcc, 0x90, 0x18, 0x2f,
	0x91, 0x6a, 0x39, 0x49, 0x83, 0x25, 0x52, 0x42, 0x55, 0x30, 0x9e, 0x92, 0xea, 0x96, 0x64, 0xc0,
	0x82, 0x74, 0x1f, 0x96, 0x06, 0x42, 0xa8, 0x48, 0xd0, 0x10, 0x53, 0x3f, 0x16, 0x21, 0x3a, 0x37,
	0xed, 0x59, 0x66, 0xf0, 0x81, 0x08, 0x91, 0xac, 0x43, 0x2b, 0xc4, 0x53, 0x16, 0xa0, 0xcf, 0x42,
	0x67, 0xc1, 0x6c, 0xb9, 0x69, 0x81, 0x37, 0x21, 0xd9, 0x86, 0x6e, 0xc2, 0xb8, 0xaf, 0x25, 0xc4,
	0x40, 0xe9, 0x6f, 0x35, 0xcc, 0x22, 0x9d, 0x84, 0xf1, 0xc3, 0x29, 0x48, 0xfe, 0x0f, 0x2b, 0x33,
	0xcd, 0xca, 0xec, 0xa6, 0x61, 0x2f, 0xcf, 0x92, 0xa5, 0x49, 0x77, 0xa0, 0x19, 0x51, 0x3e, 0xca,
	0xe8, 0x08, 0x9d, 0x96, 0xfd, 0x6e, 0x11, 0xeb, 0xfa, 0x44, 0x74, 0x80, 0x91, 0x03, 0x26, 0x61,
	0x03, 0xb2, 0x09, 0x8b, 0x6c, 0x5a, 0xc3, 0xd0, 0x69, 0x9b, 0xc5, 0xcb, 0x90, 0x5e, 0x33, 0xc5,
	0x53, 0x66, 0x54, 0xe9, 0x98, 0xd2, 0x4e, 0xe3, 0x39, 0x45, 0xc6, 0x54, 0x8e, 0x9d, 0xae, 0xa1,
	0x94, 0x14, 0x79, 0x4d, 0xe5, 0x58, 0x2f, 0xc2, 0xe2, 0x44, 0xa4, 0x0a, 0x43, 0x67, 0xc9, 0x7c,
	0x63, 0x1a, 0x93, 0x0d, 0x00, 0x2d, 0x48, 0x40, 0x83, 0x31, 0x86, 0x4e, 0xcf, 0x64, 0x5b, 0x09,
	0xe3, 0x7b, 0x06, 0x20, 0x8f, 0xe0, 0x56, 0x49, 0x88, 0x9c, 0x75, 0xcb, 0xb0, 0x7a, 0xb3, 0x44,
	0x4e, 0x7e, 0x08, 0xbd, 0x21, 0x4b, 0xe3, 0x33, 0x9a, 0x6a, 0xcd, 0x50, 0x22, 0x57, 0x0e, 0x31,
	0xdc, 0xa5, 0x02, 0x3f, 0xb4, 0x30, 0xb9, 0x07, 0x6d, 0x8e, 0x18, 0x4a, 0x7f, 0x40, 0x83, 0x93,
	0x2c, 0x71, 0xfe, 0x61, 0x8f, 0x6e, 0xb0, 0xe7, 0x06, 0xd2, 0x92, 0x0d, 0x23, 0x3a, 0x92, 0xce,
	0xb2, 0x71, 0x83, 0x0d, 0x34, 0xaa, 0x6b, 0x1f, 0x39, 0x2b, 0x56, 0x48, 0x13, 0x90, 0x35, 0x68,
	0x0e, 0xcf, 0x7c, 0xe3, 0x3c, 0xe7, 0xb6, 0xa1, 0x37, 0x86, 0x67, 0x07, 0x3a, 0x2c, 0x52, 0xda,
	0x6f, 0xce, 0xea, 0x34, 0xa5, 0xc3, 0x3c, 0x65, 0x5c, 0xe6, 0x38, 0x45, 0xea, 0x50, 0x87, 0xda,
	0x44, 0xc3, 0x33, 0x3f, 0xf7, 0xfd, 0x9a, 0x2d, 0xe6, 0xf0, 0xec, 0x83, 0x75, 0xfe, 0xbf, 0xa1,
	0x3b, 0x4d, 0xfa, 0x27, 0x38, 0x91, 0xce, 0x1d, 0xa3, 0x7b, 0xbb, 0x60, 0xbc, 0xc5, 0x89, 0xd4,
	0xd2, 0x65, 0x7c, 0xc8, 0x38, 0x93, 0x63, 0x0c, 0x8b, 0x73, 0xae, 0x5b, 0xe9, 0x66, 0x89, 0xfc,
	0xb0, 0xeb, 0xd0, 0xe2, 0xa2, 0x20, 0xfd, 0xd3, 0xd6, 0x88, 0x0b, 0x9b, 0x74, 0xbb, 0xd0, 0xde,
	0x8b, 0x90, 0xa6, 0x47, 0x28, 0x75, 0xe1, 0xdd, 0xdf, 0xab, 0xd0, 0xd9, 0x4d, 0x92, 0x68, 0x72,
	0x84, 0x4a, 0x31, 0x3e, 0x92, 0xe7, 0xac, 0x57, 0xb9, 0xca, 0x7a, 0xd5, 0xb2, 0xf5, 0xb6, 0xa1,
	0x9b, 0x69, 0x6b, 0xcf, 0x3a, 0x43, 0xcd, 0x5e, 0x84, 0x4c, 0xe2, 0xac, 0x31, 0x90, 0x7f, 0x01,
	0x8c, 0x45, 0x8c, 0x32, 0x48, 0x11, 0xed, 0xbd, 0x6c, 0x7b, 0x25, 0x84, 0xf0, 0x73, 0xfe, 0x90,
	0x22, 0x4b, 0x03, 0x7b, 0x2f, 0xbb, 0x3b, 0xbb, 0xfd, 0xcf, 0xf6, 0xb5, 0xfe, 0xb9, 0x13, 0xf4,
	0x67, 0xdf, 0x3c, 0x32, 0x8b, 0x1c, 0x4f, 0x12, 0x2c, 0x5b, 0xcc, 0xa2, 0xe4, 0x11, 0x10, 0x9a,
	0x29, 0xe1, 0x47, 0x22, 0x38, 0xf1, 0x43, 0x8c, 0xe8, 0xc4, 0x8f, 0xa5, 0xb9, 0xe5, 0x1d, 0x6f,
	0x49, 0x67, 0xde, 0x89, 0xe0, 0x64, 0x5f, 0xe3, 0x07, 0xd2, 0x7d, 0x0c, 0xcb, 0x97, 0x2d, 0x4b,
	0x1a, 0x50, 0xdb, 0x3d, 0x7a, 0xdb, 0xbb, 0x41, 0x00, 0x16, 0xf6, 0x5f, 0x7c, 0x78, 0xb3, 0xf7,
	0xa2, 0x57, 0x21, 0x4d, 0xa8, 0xbf, 0xfe, 0xe6, 0xe8, 0xb8, 0x57, 0x75, 0x5d, 0x00, 0xb3, 0xb7,
	0x97, 0x85, 0xe1, 0xac, 0x0d, 0x2b, 0x25, 0x1b, 0xba, 0x5b, 0xd0, 0xda, 0x1b, 0x53, 0x3e, 0xc2,
	0x43, 0xc6, 0x75, 0x87, 0x4c, 0x31, 0x16, 0xa7, 0x56, 0xfb, 0xa6, 0x97, 0x47, 0xee, 0xcf, 0x15,
	0xa8, 0x1f, 0x32, 0x3e, 0x22, 0x0e, 0x34, 0x72, 0x05, 0xf2, 0xea, 0x14, 0xa1, 0x36, 0xc9, 0x20,
	0x53, 0x4a, 0x9c, 0x6b, 0x49, 0xb6, 0x47, 0xf7, 0x6c, 0xa2, 0xd4, 0x60, 0x2e, 0x36, 0xaf, 0xda,
	0x17, 0x35, 0xaf, 0xfa, 0xd5, 0xcd, 0xcb, 0x6d, 0xc2, 0xc2, 0x1e, 0xe5, 0x01, 0x46, 0xee, 0x26,
	0xc0, 0x2b, 0x54, 0x2f, 0xb8, 0x4a, 0x45, 0x32, 0x21, 0x04, 0xea, 0x92, 0x7d, 0xd2, 0xfb, 0xae,
	0x3e, 0xe8, 0x78, 0x66, 0xec, 0x6e, 0x41, 0xa3, 0x48, 0x3b, 0xd0, 0x40, 0x3b, 0x34, 0x8c, 0xb6,
	0x57, 0x84, 0x6e, 0x1b, 0xe0, 0x23, 0x4b, 0x70, 0xdf, 0x74, 0x5e, 0xf7, 0x97, 0x2a, 0xc0, 0x3b,
	0x41, 0x43, 0x1b, 0x6a, 0xbf, 0xc6, 0x1c, 0x63, 0xc1, 0x59, 0x50, 0xf8, 0xb5, 0x88, 0xc9, 0x53,
	0xa8, 0x73, 0xdd, 0xdd, 0xb5, 0x0a, 0x8b, 0x3b, 0xdb, 0x97, 0xb9, 0x28, 0x7f, 0x08, 0x5f, 0xef,
	0xbf, 0x17, 0xa1, 0x75, 0x8a, 0x99, 0x42, 0x7a, 0x50, 0x4b, 0x98, 0x55, 0xa5, 0xe5, 0xe9, 0xe1,
	0x5f, 0xd2, 0x82, 0x6c, 0x95, 0x6e, 0x93, 0xf6, 0x72, 0xeb, 0x59, 0x03, 0xf9, 0x28, 0x62, 0x72,
	0x7c, 0xd9, 0xb5, 0x5a, 0x28, 0x5f, 0xab, 0x2d, 0xe8, 0x98, 0x17, 0x37, 0x18, 0x63, 0x70, 0x22,
	0xb3, 0x38, 0x7f, 0x5e, 0xda, 0x1a, 0xdc, 0xcb, 0x31, 0x72, 0x17, 0x16, 0xb3, 0x9d, 0xa1, 0x1f,
	0x88, 0x8c, 0x2b, 0x4c, 0xcd, 0x9b, 0xd2, 0xf1, 0x20, 0xdb, 0x19, 0xee, 0x59, 0xc4, 0xfd, 0xad,
	0x0a, 0x8b, 0x1e, 0x4a, 0x54, 0xb9, 0x5c, 0xdb, 0xd0, 0x0d, 0x99, 0x4c, 0xb4, 0xdb, 0x53, 0xca,
	0x43, 0x11, 0xe7, 0x46, 0xeb, 0xe4, 0xa8, 0x67, 0x40, 0x72, 0x17, 0x9a, 0x52, 0xa5, 0xc8, 0x47,
	0x6a, 0x6c, 0x1f, 0xe3, 0x67, 0xb5, 0x9d, 0xc7, 0x4f, 0xbc, 0x29, 0x78, 0xb5, 0x1a, 0xb5, 0xcf,
	0xa8, 0x71, 0xd1, 0x75, 0xf5, 0xcb, 0x5c, 0xf7, 0x37, 0x44, 0x9b, 0xd3, 0xa3, 0x31, 0xaf, 0x87,
	0x26, 0x18, 0x55, 0xf3, 0xfe, 0x68, 0x1f, 0x61, 0xd0, 0xd0, 0x65, 0xed, 0xb3, 0x75, 0xb1, 0x7d,
	0xda, 0x51, 0xee, 0xc5, 0x1e, 0x74, 0x73, 0xfb, 0x7a, 0xf8, 0x43, 0x86, 0x52, 0xb9, 0xff, 0x01,
	0xc8, 0x91, 0xdd, 0xe0, 0xe4, 0xbc, 0xa7, 0x2b, 0x65, 0x4f, 0xff, 0x51, 0x83, 0xae, 0x87, 0x81,
	0x38, 0xc5, 0x74, 0x92, 0x97, 0x66, 0x03, 0xe0, 0x4c, 0xa4, 0xa1, 0xdd, 0x7c, 0xde, 0x23, 0x5a,
	0x1a, 0x31, 0x7b, 0xbf, 0x5a, 0xf1, 0xea, 0x17, 0x29, 0x5e, 0xbb, 0x4e, 0xf1, 0xfa, 0xb5, 0x8a,
	0xdf, 0x2c, 0x2b, 0xfe, 0x10, 0x7a, 0xc8, 0x87, 0x22, 0x0d, 0xd0, 0xd7, 0x7b, 0x8d, 0x98, 0x54,
	0xa6, 0x24, 0x4d, 0x6f, 0x29, 0xc7, 0x3f, 0xe6, 0x30, 0x39, 0x86, 0xba, 0x9a, 0x24, 0x68, 0x44,
	0xef, 0xee, 0x7c, 0x7d, 0x4d, 0x53, 0x3f, 0xaf, 0xce, 0x5c, 0x68, 0x6f, 0xaa, 0x5e, 0x6d, 0xbe,
	0xe4, 0xad, 0x0b, 0x25, 0x5f, 0x85, 0x46, 0x98, 0x4e, 0xfc, 0x34, 0xe3, 0xe6, 0x27, 0x53, 0xd3,
	0x5b, 0x08, 0xd3, 0x89, 0x97, 0x71, 0xf7, 0x3b, 0x20, 0x17, 0x57, 0x25, 0xdb, 0x70, 0xef, 0x22,
	0xea, 0x1f, 0x05, 0x29, 0x8d, 0x07, 0x11, 0x86, 0xfa, 0x34, 0xb2, 0x77, 0x83, 0x6c, 0xc0, 0xda,
	0x25, 0xb4, 0x03, 0xaa, 0x52, 0xf6, 0x63, 0xaf, 0xe2, 0xfe, 0x5a, 0x81, 0x45, 0x4d, 0xcd, 0x7d,
	0x41, 0xde, 0xe7, 0x67, 0xaf, 0x98, 0xb3, 0x3f, 0xbb, 0xe6, 0xec, 0xa5, 0x99, 0xe5, 0xf1, 0xec,
	0xd4, 0xee, 0x10, 0x96, 0xe6, 0x12, 0x64, 0x0d, 0x56, 0xe6, 0x20, 0xff, 0x30, 0xa2, 0x8c, 0xf7,
	0x6e, 0x90, 0x75, 0x58, 0x9d, 0x4f, 0xd9, 0x9d, 0x3e, 0xed, 0x55, 0xae, 0x4e, 0x3e, 0xe9, 0x55,
	0xdd, 0x0d, 0x68, 0xe8, 0xa4, 0x36, 0x33, 0x81, 0xba, 0xae, 0xb0, 0xe9, 0xce, 0x2d, 0xcf, 0x8c,
	0xdd, 0xff, 0x41, 0xe7, 0x08, 0xd5, 0xb7, 0x3b, 0x2f, 0x4b, 0xf7, 0xab, 0x5c, 0x8d, 0xca, 0x7c,
	0x35, 0x9e, 0x7f, 0x05, 0x5b, 0x81, 0x88, 0xfb, 0x92, 0x2a, 0x21, 0xc7, 0x2c, 0xa2, 0x03, 0x59,
	0x08, 0x11, 0xb1, 0x81, 0xfd, 0x43, 0x32, 0xc8, 0x86, 0xcf, 0x57, 0x8f, 0x0d, 0x78, 0x60, 0xc5,
	0x39, 0x98, 0x4a, 0xf3, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x2a, 0x38, 0x22, 0xfe, 0x0c,
	0x00, 0x00,
}
