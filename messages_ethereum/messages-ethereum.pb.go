// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-ethereum.proto

/*
Package messages_ethereum is a generated protocol buffer package.

It is generated from these files:
	messages-ethereum.proto

It has these top-level messages:
	EthereumGetPublicKey
	EthereumPublicKey
	EthereumGetAddress
	EthereumAddress
	EthereumSignTx
	EthereumTxRequest
	EthereumTxAck
	EthereumSignMessage
	EthereumMessageSignature
	EthereumVerifyMessage
*/
package messages_ethereum

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import messages_common "github.com/tranvictor/trezoreum/messages_common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Request: Ask device for public key corresponding to address_n path
// @start
// @next EthereumPublicKey
// @next Failure
type EthereumGetPublicKey struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay      *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumGetPublicKey) Reset()                    { *m = EthereumGetPublicKey{} }
func (m *EthereumGetPublicKey) String() string            { return proto.CompactTextString(m) }
func (*EthereumGetPublicKey) ProtoMessage()               {}
func (*EthereumGetPublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EthereumGetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumGetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains public key derived from device private seed
// @end
type EthereumPublicKey struct {
	Node             *messages_common.HDNodeType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Xpub             *string                     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *EthereumPublicKey) Reset()                    { *m = EthereumPublicKey{} }
func (m *EthereumPublicKey) String() string            { return proto.CompactTextString(m) }
func (*EthereumPublicKey) ProtoMessage()               {}
func (*EthereumPublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EthereumPublicKey) GetNode() *messages_common.HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *EthereumPublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

// *
// Request: Ask device for Ethereum address corresponding to address_n path
// @start
// @next EthereumAddress
// @next Failure
type EthereumGetAddress struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay      *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumGetAddress) Reset()                    { *m = EthereumGetAddress{} }
func (m *EthereumGetAddress) String() string            { return proto.CompactTextString(m) }
func (*EthereumGetAddress) ProtoMessage()               {}
func (*EthereumGetAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EthereumGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

// *
// Response: Contains an Ethereum address derived from device private seed
// @end
type EthereumAddress struct {
	Address          *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EthereumAddress) Reset()                    { *m = EthereumAddress{} }
func (m *EthereumAddress) String() string            { return proto.CompactTextString(m) }
func (*EthereumAddress) ProtoMessage()               {}
func (*EthereumAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EthereumAddress) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// *
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next EthereumTxRequest
// @next Failure
type EthereumSignTx struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce            []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice         []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit         []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	To               *string  `protobuf:"bytes,11,opt,name=to" json:"to,omitempty"`
	Value            []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength       *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ChainId          *uint32  `protobuf:"varint,9,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TxType           *uint32  `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumSignTx) Reset()                    { *m = EthereumSignTx{} }
func (m *EthereumSignTx) String() string            { return proto.CompactTextString(m) }
func (*EthereumSignTx) ProtoMessage()               {}
func (*EthereumSignTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EthereumSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EthereumSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *EthereumSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *EthereumSignTx) GetTo() string {
	if m != nil && m.To != nil {
		return *m.To
	}
	return ""
}

func (m *EthereumSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EthereumSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *EthereumSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *EthereumSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *EthereumSignTx) GetTxType() uint32 {
	if m != nil && m.TxType != nil {
		return *m.TxType
	}
	return 0
}

// *
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next EthereumTxAck
type EthereumTxRequest struct {
	DataLength       *uint32 `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV       *uint32 `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR       []byte  `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS       []byte  `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EthereumTxRequest) Reset()                    { *m = EthereumTxRequest{} }
func (m *EthereumTxRequest) String() string            { return proto.CompactTextString(m) }
func (*EthereumTxRequest) ProtoMessage()               {}
func (*EthereumTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EthereumTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *EthereumTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *EthereumTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *EthereumTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

// *
// Request: Transaction payload data.
// @next EthereumTxRequest
type EthereumTxAck struct {
	DataChunk        []byte `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *EthereumTxAck) Reset()                    { *m = EthereumTxAck{} }
func (m *EthereumTxAck) String() string            { return proto.CompactTextString(m) }
func (*EthereumTxAck) ProtoMessage()               {}
func (*EthereumTxAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EthereumTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

// *
// Request: Ask device to sign message
// @start
// @next EthereumMessageSignature
// @next Failure
type EthereumSignMessage struct {
	AddressN         []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message          []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EthereumSignMessage) Reset()                    { *m = EthereumSignMessage{} }
func (m *EthereumSignMessage) String() string            { return proto.CompactTextString(m) }
func (*EthereumSignMessage) ProtoMessage()               {}
func (*EthereumSignMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EthereumSignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *EthereumSignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// *
// Response: Signed message
// @end
type EthereumMessageSignature struct {
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Address          *string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EthereumMessageSignature) Reset()                    { *m = EthereumMessageSignature{} }
func (m *EthereumMessageSignature) String() string            { return proto.CompactTextString(m) }
func (*EthereumMessageSignature) ProtoMessage()               {}
func (*EthereumMessageSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EthereumMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *EthereumMessageSignature) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

// *
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type EthereumVerifyMessage struct {
	Signature        []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message          []byte  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Address          *string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EthereumVerifyMessage) Reset()                    { *m = EthereumVerifyMessage{} }
func (m *EthereumVerifyMessage) String() string            { return proto.CompactTextString(m) }
func (*EthereumVerifyMessage) ProtoMessage()               {}
func (*EthereumVerifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EthereumVerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *EthereumVerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EthereumVerifyMessage) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*EthereumGetPublicKey)(nil), "EthereumGetPublicKey")
	proto.RegisterType((*EthereumPublicKey)(nil), "EthereumPublicKey")
	proto.RegisterType((*EthereumGetAddress)(nil), "EthereumGetAddress")
	proto.RegisterType((*EthereumAddress)(nil), "EthereumAddress")
	proto.RegisterType((*EthereumSignTx)(nil), "EthereumSignTx")
	proto.RegisterType((*EthereumTxRequest)(nil), "EthereumTxRequest")
	proto.RegisterType((*EthereumTxAck)(nil), "EthereumTxAck")
	proto.RegisterType((*EthereumSignMessage)(nil), "EthereumSignMessage")
	proto.RegisterType((*EthereumMessageSignature)(nil), "EthereumMessageSignature")
	proto.RegisterType((*EthereumVerifyMessage)(nil), "EthereumVerifyMessage")
}

func init() { proto.RegisterFile("messages-ethereum.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0xda, 0xb2, 0xb6, 0x37, 0xeb, 0x00, 0xb3, 0x69, 0xe6, 0x4b, 0x2b, 0xe1, 0xa5, 0x12,
	0x90, 0x07, 0x9e, 0x79, 0xd9, 0x18, 0x62, 0x13, 0x65, 0x9a, 0xd2, 0xaa, 0xaf, 0x91, 0x9b, 0x78,
	0x89, 0xb5, 0xc4, 0x0e, 0xb1, 0x33, 0x5a, 0xfe, 0x08, 0xff, 0x80, 0xdf, 0x89, 0xe2, 0xd8, 0x4d,
	0x0b, 0xd2, 0x78, 0xe0, 0x2d, 0xf7, 0x9c, 0xe3, 0x73, 0x8f, 0xee, 0xb5, 0x03, 0xc7, 0x39, 0x95,
	0x92, 0x24, 0x54, 0xbe, 0xa3, 0x2a, 0xa5, 0x25, 0xad, 0x72, 0xbf, 0x28, 0x85, 0x12, 0xcf, 0x8e,
	0x36, 0x44, 0x24, 0xf2, 0x5c, 0xf0, 0x06, 0xf6, 0x16, 0x70, 0xf8, 0xc9, 0x08, 0x3f, 0x53, 0x75,
	0x5d, 0x2d, 0x33, 0x16, 0x7d, 0xa1, 0x6b, 0xf4, 0x1c, 0x86, 0x24, 0x8e, 0x4b, 0x2a, 0x65, 0xc8,
	0xb1, 0x33, 0xee, 0x4e, 0x46, 0xc1, 0xc0, 0x00, 0x57, 0xe8, 0x15, 0xec, 0xcb, 0x54, 0x7c, 0x0f,
	0x63, 0x26, 0x8b, 0x8c, 0xac, 0x71, 0x67, 0xec, 0x4c, 0x06, 0x81, 0x5b, 0x63, 0xe7, 0x0d, 0xe4,
	0x5d, 0xc0, 0x63, 0xeb, 0xdb, 0x9a, 0x9e, 0x40, 0x8f, 0x8b, 0x98, 0x62, 0x67, 0xec, 0x4c, 0xdc,
	0xf7, 0xae, 0x7f, 0x71, 0x7e, 0x25, 0x62, 0x3a, 0x5f, 0x17, 0x34, 0xd0, 0x04, 0x42, 0xd0, 0x5b,
	0x15, 0xd5, 0x52, 0x1b, 0x0e, 0x03, 0xfd, 0xed, 0xcd, 0x01, 0x6d, 0x25, 0x3c, 0x6d, 0x32, 0xfc,
	0x77, 0xbe, 0x37, 0xf0, 0xd0, 0xba, 0x5a, 0x4b, 0x0c, 0x7d, 0xe3, 0x60, 0xfa, 0xdb, 0xd2, 0xfb,
	0xd5, 0x81, 0x03, 0xab, 0x9e, 0xb1, 0x84, 0xcf, 0x57, 0xf7, 0xf7, 0x3f, 0x84, 0x07, 0x5c, 0xf0,
	0x88, 0x6a, 0x9f, 0xfd, 0xa0, 0x29, 0xea, 0x23, 0x09, 0x91, 0x61, 0x51, 0xb2, 0x88, 0xe2, 0xae,
	0x66, 0x06, 0x09, 0x91, 0xd7, 0x75, 0x6d, 0xc9, 0x8c, 0xe5, 0x4c, 0xe1, 0xde, 0x86, 0x9c, 0xd6,
	0x35, 0x3a, 0x80, 0x8e, 0x12, 0xd8, 0xd5, 0xa1, 0x3a, 0x4a, 0xd4, 0xfe, 0x77, 0x24, 0xab, 0x28,
	0xde, 0x6b, 0xfc, 0x75, 0x81, 0xde, 0x02, 0x8a, 0x89, 0x22, 0x21, 0xe3, 0x4c, 0x31, 0x92, 0x85,
	0x51, 0x5a, 0xf1, 0x5b, 0xdc, 0xd7, 0x92, 0x47, 0x35, 0x73, 0xd9, 0x10, 0x1f, 0x6b, 0x1c, 0x9d,
	0x80, 0xab, 0xd5, 0x19, 0xe5, 0x89, 0x4a, 0xf1, 0x60, 0xec, 0x4c, 0x46, 0x01, 0xd4, 0xd0, 0x54,
	0x23, 0xe8, 0x29, 0x0c, 0xa2, 0x94, 0x30, 0x1e, 0xb2, 0x18, 0x0f, 0x35, 0xdb, 0xd7, 0xf5, 0x65,
	0x8c, 0x8e, 0xa1, 0xaf, 0x56, 0xa1, 0x5a, 0x17, 0x14, 0x83, 0x66, 0xf6, 0xd4, 0xaa, 0xde, 0xa2,
	0xf7, 0xd3, 0x69, 0xd7, 0x3e, 0x5f, 0x05, 0xf4, 0x5b, 0x45, 0xa5, 0xfa, 0xb3, 0x95, 0xf3, 0x57,
	0xab, 0x13, 0x70, 0x25, 0x4b, 0x38, 0x51, 0x55, 0x49, 0xc3, 0x3b, 0x3d, 0xb5, 0x51, 0x00, 0x1b,
	0x68, 0xb1, 0x2b, 0x28, 0xcd, 0xf0, 0x5a, 0x41, 0xb0, 0x2b, 0x90, 0x66, 0x80, 0xad, 0x60, 0xe6,
	0xf9, 0x30, 0x6a, 0x83, 0x9d, 0x46, 0xb7, 0xe8, 0x25, 0xe8, 0x04, 0x66, 0x4a, 0x8e, 0x3e, 0x30,
	0xac, 0x11, 0x3d, 0x1e, 0x6f, 0x0a, 0x4f, 0xb6, 0x37, 0xfe, 0xb5, 0x79, 0x3c, 0xf7, 0xaf, 0x1d,
	0x43, 0xdf, 0x3c, 0x32, 0xb3, 0x78, 0x5b, 0x7a, 0x01, 0x60, 0xeb, 0x66, 0x9c, 0x66, 0x36, 0x1a,
	0x7a, 0x01, 0xc3, 0x4d, 0x4e, 0x73, 0xae, 0x05, 0xb6, 0x2f, 0x65, 0x77, 0xf7, 0x52, 0x32, 0x38,
	0xb2, 0x9e, 0x0b, 0x5a, 0xb2, 0x9b, 0xb5, 0xcd, 0xf8, 0x4f, 0x43, 0x1b, 0xb2, 0xbb, 0x13, 0x72,
	0xbb, 0x55, 0x6f, 0xa7, 0xd5, 0xd9, 0x07, 0x78, 0x1d, 0x89, 0xdc, 0x97, 0x44, 0x09, 0x99, 0xb2,
	0x8c, 0x2c, 0xa5, 0xaf, 0x4a, 0xfa, 0x43, 0x94, 0x7e, 0xc6, 0x96, 0xcd, 0x8f, 0x64, 0x59, 0xdd,
	0x9c, 0x1d, 0xcd, 0x35, 0x68, 0x72, 0xd8, 0x70, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xca,
	0x03, 0xb0, 0x93, 0x04, 0x00, 0x00,
}
