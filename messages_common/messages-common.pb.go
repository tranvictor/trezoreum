// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-common.proto

/*
Package messages_common is a generated protocol buffer package.

It is generated from these files:
	messages-common.proto

It has these top-level messages:
	Success
	Failure
	ButtonRequest
	ButtonAck
	PinMatrixRequest
	PinMatrixAck
	PassphraseRequest
	PassphraseAck
	PassphraseStateRequest
	PassphraseStateAck
	HDNodeType
*/
package messages_common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Failure_FailureType int32

const (
	Failure_Failure_UnexpectedMessage Failure_FailureType = 1
	Failure_Failure_ButtonExpected    Failure_FailureType = 2
	Failure_Failure_DataError         Failure_FailureType = 3
	Failure_Failure_ActionCancelled   Failure_FailureType = 4
	Failure_Failure_PinExpected       Failure_FailureType = 5
	Failure_Failure_PinCancelled      Failure_FailureType = 6
	Failure_Failure_PinInvalid        Failure_FailureType = 7
	Failure_Failure_InvalidSignature  Failure_FailureType = 8
	Failure_Failure_ProcessError      Failure_FailureType = 9
	Failure_Failure_NotEnoughFunds    Failure_FailureType = 10
	Failure_Failure_NotInitialized    Failure_FailureType = 11
	Failure_Failure_PinMismatch       Failure_FailureType = 12
	Failure_Failure_FirmwareError     Failure_FailureType = 99
)

var Failure_FailureType_name = map[int32]string{
	1:  "Failure_UnexpectedMessage",
	2:  "Failure_ButtonExpected",
	3:  "Failure_DataError",
	4:  "Failure_ActionCancelled",
	5:  "Failure_PinExpected",
	6:  "Failure_PinCancelled",
	7:  "Failure_PinInvalid",
	8:  "Failure_InvalidSignature",
	9:  "Failure_ProcessError",
	10: "Failure_NotEnoughFunds",
	11: "Failure_NotInitialized",
	12: "Failure_PinMismatch",
	99: "Failure_FirmwareError",
}
var Failure_FailureType_value = map[string]int32{
	"Failure_UnexpectedMessage": 1,
	"Failure_ButtonExpected":    2,
	"Failure_DataError":         3,
	"Failure_ActionCancelled":   4,
	"Failure_PinExpected":       5,
	"Failure_PinCancelled":      6,
	"Failure_PinInvalid":        7,
	"Failure_InvalidSignature":  8,
	"Failure_ProcessError":      9,
	"Failure_NotEnoughFunds":    10,
	"Failure_NotInitialized":    11,
	"Failure_PinMismatch":       12,
	"Failure_FirmwareError":     99,
}

func (x Failure_FailureType) Enum() *Failure_FailureType {
	p := new(Failure_FailureType)
	*p = x
	return p
}
func (x Failure_FailureType) String() string {
	return proto.EnumName(Failure_FailureType_name, int32(x))
}
func (x *Failure_FailureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Failure_FailureType_value, data, "Failure_FailureType")
	if err != nil {
		return err
	}
	*x = Failure_FailureType(value)
	return nil
}
func (Failure_FailureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// *
// Type of button request
type ButtonRequest_ButtonRequestType int32

const (
	ButtonRequest_ButtonRequest_Other                 ButtonRequest_ButtonRequestType = 1
	ButtonRequest_ButtonRequest_FeeOverThreshold      ButtonRequest_ButtonRequestType = 2
	ButtonRequest_ButtonRequest_ConfirmOutput         ButtonRequest_ButtonRequestType = 3
	ButtonRequest_ButtonRequest_ResetDevice           ButtonRequest_ButtonRequestType = 4
	ButtonRequest_ButtonRequest_ConfirmWord           ButtonRequest_ButtonRequestType = 5
	ButtonRequest_ButtonRequest_WipeDevice            ButtonRequest_ButtonRequestType = 6
	ButtonRequest_ButtonRequest_ProtectCall           ButtonRequest_ButtonRequestType = 7
	ButtonRequest_ButtonRequest_SignTx                ButtonRequest_ButtonRequestType = 8
	ButtonRequest_ButtonRequest_FirmwareCheck         ButtonRequest_ButtonRequestType = 9
	ButtonRequest_ButtonRequest_Address               ButtonRequest_ButtonRequestType = 10
	ButtonRequest_ButtonRequest_PublicKey             ButtonRequest_ButtonRequestType = 11
	ButtonRequest_ButtonRequest_MnemonicWordCount     ButtonRequest_ButtonRequestType = 12
	ButtonRequest_ButtonRequest_MnemonicInput         ButtonRequest_ButtonRequestType = 13
	ButtonRequest_ButtonRequest_PassphraseType        ButtonRequest_ButtonRequestType = 14
	ButtonRequest_ButtonRequest_UnknownDerivationPath ButtonRequest_ButtonRequestType = 15
)

var ButtonRequest_ButtonRequestType_name = map[int32]string{
	1:  "ButtonRequest_Other",
	2:  "ButtonRequest_FeeOverThreshold",
	3:  "ButtonRequest_ConfirmOutput",
	4:  "ButtonRequest_ResetDevice",
	5:  "ButtonRequest_ConfirmWord",
	6:  "ButtonRequest_WipeDevice",
	7:  "ButtonRequest_ProtectCall",
	8:  "ButtonRequest_SignTx",
	9:  "ButtonRequest_FirmwareCheck",
	10: "ButtonRequest_Address",
	11: "ButtonRequest_PublicKey",
	12: "ButtonRequest_MnemonicWordCount",
	13: "ButtonRequest_MnemonicInput",
	14: "ButtonRequest_PassphraseType",
	15: "ButtonRequest_UnknownDerivationPath",
}
var ButtonRequest_ButtonRequestType_value = map[string]int32{
	"ButtonRequest_Other":                 1,
	"ButtonRequest_FeeOverThreshold":      2,
	"ButtonRequest_ConfirmOutput":         3,
	"ButtonRequest_ResetDevice":           4,
	"ButtonRequest_ConfirmWord":           5,
	"ButtonRequest_WipeDevice":            6,
	"ButtonRequest_ProtectCall":           7,
	"ButtonRequest_SignTx":                8,
	"ButtonRequest_FirmwareCheck":         9,
	"ButtonRequest_Address":               10,
	"ButtonRequest_PublicKey":             11,
	"ButtonRequest_MnemonicWordCount":     12,
	"ButtonRequest_MnemonicInput":         13,
	"ButtonRequest_PassphraseType":        14,
	"ButtonRequest_UnknownDerivationPath": 15,
}

func (x ButtonRequest_ButtonRequestType) Enum() *ButtonRequest_ButtonRequestType {
	p := new(ButtonRequest_ButtonRequestType)
	*p = x
	return p
}
func (x ButtonRequest_ButtonRequestType) String() string {
	return proto.EnumName(ButtonRequest_ButtonRequestType_name, int32(x))
}
func (x *ButtonRequest_ButtonRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ButtonRequest_ButtonRequestType_value, data, "ButtonRequest_ButtonRequestType")
	if err != nil {
		return err
	}
	*x = ButtonRequest_ButtonRequestType(value)
	return nil
}
func (ButtonRequest_ButtonRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

// *
// Type of PIN request
type PinMatrixRequest_PinMatrixRequestType int32

const (
	PinMatrixRequest_PinMatrixRequestType_Current   PinMatrixRequest_PinMatrixRequestType = 1
	PinMatrixRequest_PinMatrixRequestType_NewFirst  PinMatrixRequest_PinMatrixRequestType = 2
	PinMatrixRequest_PinMatrixRequestType_NewSecond PinMatrixRequest_PinMatrixRequestType = 3
)

var PinMatrixRequest_PinMatrixRequestType_name = map[int32]string{
	1: "PinMatrixRequestType_Current",
	2: "PinMatrixRequestType_NewFirst",
	3: "PinMatrixRequestType_NewSecond",
}
var PinMatrixRequest_PinMatrixRequestType_value = map[string]int32{
	"PinMatrixRequestType_Current":   1,
	"PinMatrixRequestType_NewFirst":  2,
	"PinMatrixRequestType_NewSecond": 3,
}

func (x PinMatrixRequest_PinMatrixRequestType) Enum() *PinMatrixRequest_PinMatrixRequestType {
	p := new(PinMatrixRequest_PinMatrixRequestType)
	*p = x
	return p
}
func (x PinMatrixRequest_PinMatrixRequestType) String() string {
	return proto.EnumName(PinMatrixRequest_PinMatrixRequestType_name, int32(x))
}
func (x *PinMatrixRequest_PinMatrixRequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PinMatrixRequest_PinMatrixRequestType_value, data, "PinMatrixRequest_PinMatrixRequestType")
	if err != nil {
		return err
	}
	*x = PinMatrixRequest_PinMatrixRequestType(value)
	return nil
}
func (PinMatrixRequest_PinMatrixRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

// *
// Response: Success of the previous request
// @end
type Success struct {
	Message          *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Success) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Failure of the previous request
// @end
type Failure struct {
	Code             *Failure_FailureType `protobuf:"varint,1,opt,name=code,enum=Failure_FailureType" json:"code,omitempty"`
	Message          *string              `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Failure) GetCode() Failure_FailureType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Failure_Failure_UnexpectedMessage
}

func (m *Failure) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// *
// Response: Device is waiting for HW button press.
// @auxstart
// @next ButtonAck
type ButtonRequest struct {
	Code             *ButtonRequest_ButtonRequestType `protobuf:"varint,1,opt,name=code,enum=ButtonRequest_ButtonRequestType" json:"code,omitempty"`
	Data             *string                          `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *ButtonRequest) Reset()                    { *m = ButtonRequest{} }
func (m *ButtonRequest) String() string            { return proto.CompactTextString(m) }
func (*ButtonRequest) ProtoMessage()               {}
func (*ButtonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ButtonRequest) GetCode() ButtonRequest_ButtonRequestType {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ButtonRequest_ButtonRequest_Other
}

func (m *ButtonRequest) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

// *
// Request: Computer agrees to wait for HW button press
// @auxend
type ButtonAck struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ButtonAck) Reset()                    { *m = ButtonAck{} }
func (m *ButtonAck) String() string            { return proto.CompactTextString(m) }
func (*ButtonAck) ProtoMessage()               {}
func (*ButtonAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// Response: Device is asking computer to show PIN matrix and awaits PIN encoded using this matrix scheme
// @auxstart
// @next PinMatrixAck
type PinMatrixRequest struct {
	Type             *PinMatrixRequest_PinMatrixRequestType `protobuf:"varint,1,opt,name=type,enum=PinMatrixRequest_PinMatrixRequestType" json:"type,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *PinMatrixRequest) Reset()                    { *m = PinMatrixRequest{} }
func (m *PinMatrixRequest) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixRequest) ProtoMessage()               {}
func (*PinMatrixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PinMatrixRequest) GetType() PinMatrixRequest_PinMatrixRequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PinMatrixRequest_PinMatrixRequestType_Current
}

// *
// Request: Computer responds with encoded PIN
// @auxend
type PinMatrixAck struct {
	Pin              *string `protobuf:"bytes,1,req,name=pin" json:"pin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PinMatrixAck) Reset()                    { *m = PinMatrixAck{} }
func (m *PinMatrixAck) String() string            { return proto.CompactTextString(m) }
func (*PinMatrixAck) ProtoMessage()               {}
func (*PinMatrixAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PinMatrixAck) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

// *
// Response: Device awaits encryption passphrase
// @auxstart
// @next PassphraseAck
type PassphraseRequest struct {
	OnDevice         *bool  `protobuf:"varint,1,opt,name=on_device,json=onDevice" json:"on_device,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseRequest) Reset()                    { *m = PassphraseRequest{} }
func (m *PassphraseRequest) String() string            { return proto.CompactTextString(m) }
func (*PassphraseRequest) ProtoMessage()               {}
func (*PassphraseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PassphraseRequest) GetOnDevice() bool {
	if m != nil && m.OnDevice != nil {
		return *m.OnDevice
	}
	return false
}

// *
// Request: Send passphrase back
// @next PassphraseStateRequest
type PassphraseAck struct {
	Passphrase       *string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
	State            []byte  `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PassphraseAck) Reset()                    { *m = PassphraseAck{} }
func (m *PassphraseAck) String() string            { return proto.CompactTextString(m) }
func (*PassphraseAck) ProtoMessage()               {}
func (*PassphraseAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PassphraseAck) GetPassphrase() string {
	if m != nil && m.Passphrase != nil {
		return *m.Passphrase
	}
	return ""
}

func (m *PassphraseAck) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// *
// Response: Device awaits passphrase state
// @next PassphraseStateAck
type PassphraseStateRequest struct {
	State            []byte `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseStateRequest) Reset()                    { *m = PassphraseStateRequest{} }
func (m *PassphraseStateRequest) String() string            { return proto.CompactTextString(m) }
func (*PassphraseStateRequest) ProtoMessage()               {}
func (*PassphraseStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PassphraseStateRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// *
// Request: Send passphrase state back
// @auxend
type PassphraseStateAck struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PassphraseStateAck) Reset()                    { *m = PassphraseStateAck{} }
func (m *PassphraseStateAck) String() string            { return proto.CompactTextString(m) }
func (*PassphraseStateAck) ProtoMessage()               {}
func (*PassphraseStateAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// *
// Structure representing BIP32 (hierarchical deterministic) node
// Used for imports of private key into the device and exporting public key out of device
// @embed
type HDNodeType struct {
	Depth            *uint32 `protobuf:"varint,1,req,name=depth" json:"depth,omitempty"`
	Fingerprint      *uint32 `protobuf:"varint,2,req,name=fingerprint" json:"fingerprint,omitempty"`
	ChildNum         *uint32 `protobuf:"varint,3,req,name=child_num,json=childNum" json:"child_num,omitempty"`
	ChainCode        []byte  `protobuf:"bytes,4,req,name=chain_code,json=chainCode" json:"chain_code,omitempty"`
	PrivateKey       []byte  `protobuf:"bytes,5,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	PublicKey        []byte  `protobuf:"bytes,6,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HDNodeType) Reset()                    { *m = HDNodeType{} }
func (m *HDNodeType) String() string            { return proto.CompactTextString(m) }
func (*HDNodeType) ProtoMessage()               {}
func (*HDNodeType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HDNodeType) GetDepth() uint32 {
	if m != nil && m.Depth != nil {
		return *m.Depth
	}
	return 0
}

func (m *HDNodeType) GetFingerprint() uint32 {
	if m != nil && m.Fingerprint != nil {
		return *m.Fingerprint
	}
	return 0
}

func (m *HDNodeType) GetChildNum() uint32 {
	if m != nil && m.ChildNum != nil {
		return *m.ChildNum
	}
	return 0
}

func (m *HDNodeType) GetChainCode() []byte {
	if m != nil {
		return m.ChainCode
	}
	return nil
}

func (m *HDNodeType) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *HDNodeType) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterType((*Success)(nil), "Success")
	proto.RegisterType((*Failure)(nil), "Failure")
	proto.RegisterType((*ButtonRequest)(nil), "ButtonRequest")
	proto.RegisterType((*ButtonAck)(nil), "ButtonAck")
	proto.RegisterType((*PinMatrixRequest)(nil), "PinMatrixRequest")
	proto.RegisterType((*PinMatrixAck)(nil), "PinMatrixAck")
	proto.RegisterType((*PassphraseRequest)(nil), "PassphraseRequest")
	proto.RegisterType((*PassphraseAck)(nil), "PassphraseAck")
	proto.RegisterType((*PassphraseStateRequest)(nil), "PassphraseStateRequest")
	proto.RegisterType((*PassphraseStateAck)(nil), "PassphraseStateAck")
	proto.RegisterType((*HDNodeType)(nil), "HDNodeType")
	proto.RegisterEnum("Failure_FailureType", Failure_FailureType_name, Failure_FailureType_value)
	proto.RegisterEnum("ButtonRequest_ButtonRequestType", ButtonRequest_ButtonRequestType_name, ButtonRequest_ButtonRequestType_value)
	proto.RegisterEnum("PinMatrixRequest_PinMatrixRequestType", PinMatrixRequest_PinMatrixRequestType_name, PinMatrixRequest_PinMatrixRequestType_value)
}

func init() { proto.RegisterFile("messages-common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0x86, 0x6c, 0x27, 0xb1, 0xc7, 0xce, 0x96, 0x61, 0x9d, 0x44, 0xdb, 0x24, 0x1b, 0x57, 0x01,
	0xda, 0x5c, 0x6a, 0x14, 0x45, 0x4f, 0xbd, 0xa5, 0x4e, 0x8c, 0x06, 0x8b, 0xfc, 0x40, 0xc9, 0x62,
	0x8f, 0x06, 0x4b, 0xcd, 0x46, 0x84, 0x25, 0x52, 0xa5, 0xa8, 0x24, 0xee, 0xa5, 0x0f, 0xd6, 0x4b,
	0x1f, 0xa0, 0x40, 0x1f, 0xa4, 0x97, 0x3e, 0x42, 0x41, 0xfd, 0xc4, 0x92, 0x9d, 0x3d, 0x49, 0xfc,
	0xbe, 0x6f, 0x86, 0x1c, 0x7e, 0xc3, 0x81, 0xdd, 0x18, 0xd3, 0x94, 0x3d, 0x60, 0xfa, 0x1d, 0x57,
	0x71, 0xac, 0xe4, 0x38, 0xd1, 0xca, 0x28, 0xef, 0x04, 0xb6, 0xee, 0x32, 0xce, 0x31, 0x4d, 0xa9,
	0x0b, 0x5b, 0xa5, 0xc6, 0x75, 0x46, 0xce, 0x69, 0xcf, 0xaf, 0x96, 0xde, 0x9f, 0x6d, 0xd8, 0x9a,
	0x32, 0x11, 0x65, 0x1a, 0xe9, 0x29, 0x74, 0xb8, 0x0a, 0x0a, 0xc9, 0x9b, 0x1f, 0x86, 0xe3, 0x12,
	0xaf, 0xbe, 0xf7, 0x8b, 0x04, 0xfd, 0x5c, 0x51, 0xcf, 0xd7, 0x6a, 0xe6, 0xfb, 0xb7, 0x05, 0xfd,
	0x9a, 0x9e, 0x1e, 0xc1, 0xdb, 0x72, 0x39, 0xfb, 0x20, 0xf1, 0x39, 0x41, 0x6e, 0x30, 0xb8, 0x2a,
	0xc4, 0xc4, 0xa1, 0x5f, 0xc1, 0x5e, 0x45, 0xff, 0x9c, 0x19, 0xa3, 0xe4, 0x45, 0x29, 0x21, 0x2d,
	0xba, 0x0b, 0x3b, 0x15, 0x77, 0xce, 0x0c, 0xbb, 0xd0, 0x5a, 0x69, 0xd2, 0xa6, 0x07, 0xb0, 0x5f,
	0xc1, 0x67, 0xdc, 0x08, 0x25, 0x27, 0x4c, 0x72, 0x8c, 0x22, 0x0c, 0x48, 0x87, 0xee, 0xc3, 0x97,
	0x15, 0x79, 0x2b, 0x96, 0xc9, 0x36, 0xa8, 0x0b, 0xc3, 0x1a, 0xb1, 0x0c, 0xd9, 0xa4, 0x7b, 0x40,
	0x6b, 0xcc, 0xa5, 0x7c, 0x64, 0x91, 0x08, 0xc8, 0x16, 0x3d, 0x04, 0xb7, 0xc2, 0x4b, 0xf0, 0x4e,
	0x3c, 0x48, 0x66, 0x32, 0x8d, 0xa4, 0xdb, 0xc8, 0xa7, 0x95, 0xbd, 0xe4, 0xe2, 0x7c, 0xbd, 0x7a,
	0x49, 0xd7, 0xca, 0x5c, 0x48, 0x95, 0x3d, 0x84, 0xd3, 0x4c, 0x06, 0x29, 0x81, 0x15, 0xee, 0x52,
	0x0a, 0x23, 0x58, 0x24, 0x7e, 0xc7, 0x80, 0xf4, 0x57, 0x8e, 0x7e, 0x25, 0xd2, 0x98, 0x19, 0x1e,
	0x92, 0x01, 0x7d, 0x0b, 0xbb, 0x15, 0x31, 0x15, 0x3a, 0x7e, 0x62, 0x1a, 0x8b, 0xbd, 0xb8, 0xf7,
	0x77, 0x07, 0xb6, 0x8b, 0x7b, 0xf3, 0xf1, 0xb7, 0x0c, 0x53, 0x43, 0x7f, 0x6c, 0x78, 0x38, 0x1a,
	0x37, 0xd8, 0xe6, 0xaa, 0xe6, 0x27, 0x85, 0x4e, 0xc0, 0x0c, 0x2b, 0xcd, 0xcc, 0xff, 0xbd, 0xff,
	0xda, 0xb0, 0xb3, 0xa6, 0xb7, 0xa7, 0x6c, 0x80, 0xb3, 0x1b, 0x13, 0xa2, 0x26, 0x0e, 0xf5, 0xe0,
	0x5d, 0x93, 0x98, 0x22, 0xde, 0x3c, 0xa2, 0xbe, 0x0f, 0x35, 0xa6, 0xa1, 0x8a, 0xac, 0xa3, 0xc7,
	0x70, 0xd0, 0xd4, 0x4c, 0x94, 0xfc, 0x24, 0x74, 0x7c, 0x93, 0x99, 0x24, 0x33, 0xa4, 0x6d, 0xbb,
	0xa5, 0x29, 0xf0, 0x31, 0x45, 0x73, 0x8e, 0x8f, 0x82, 0x23, 0xe9, 0xac, 0xd3, 0x65, 0xfc, 0x47,
	0xa5, 0xad, 0xc7, 0x87, 0xe0, 0x36, 0xe9, 0x8f, 0x22, 0xc1, 0x32, 0x78, 0x73, 0x3d, 0xf8, 0x56,
	0x2b, 0x83, 0xdc, 0x4c, 0x58, 0x14, 0x91, 0x2d, 0x6b, 0x68, 0x93, 0xb6, 0x6e, 0xdf, 0x3f, 0x93,
	0xee, 0xfa, 0xa9, 0x2b, 0x17, 0x26, 0x21, 0xf2, 0x39, 0xe9, 0x59, 0x83, 0x9a, 0x82, 0xb3, 0x20,
	0xd0, 0x98, 0x5a, 0xc3, 0x0f, 0x60, 0x7f, 0x65, 0xd3, 0xec, 0xd7, 0x48, 0xf0, 0xf7, 0xb8, 0x20,
	0x7d, 0x7a, 0x02, 0xc7, 0x4d, 0xf2, 0x4a, 0x62, 0xac, 0xa4, 0xe0, 0xb6, 0x9e, 0x89, 0xca, 0xa4,
	0x21, 0x83, 0xf5, 0xdd, 0x2b, 0xd1, 0xa5, 0xb4, 0x77, 0xb6, 0x4d, 0x47, 0x70, 0xb8, 0xb2, 0x05,
	0x4b, 0xd3, 0x24, 0xd4, 0x2c, 0xcd, 0x5f, 0x20, 0x79, 0x43, 0xbf, 0x85, 0x93, 0xa6, 0xe2, 0x83,
	0x9c, 0x4b, 0xf5, 0x24, 0xcf, 0x51, 0x8b, 0x47, 0x66, 0x9f, 0xd0, 0x2d, 0x33, 0x21, 0xf9, 0xc2,
	0xeb, 0x43, 0xaf, 0x10, 0x9e, 0xf1, 0xb9, 0xf7, 0x8f, 0x03, 0xc4, 0x36, 0x22, 0x33, 0x5a, 0x3c,
	0x57, 0xed, 0xf5, 0x13, 0x74, 0xcc, 0x22, 0xa9, 0xda, 0xeb, 0x9b, 0xf1, 0xaa, 0x60, 0x0d, 0x28,
	0x9a, 0xcc, 0xc6, 0x78, 0x7f, 0xc0, 0xf0, 0x35, 0xd6, 0x16, 0xf0, 0x1a, 0x3e, 0x9b, 0x64, 0x5a,
	0xa3, 0x34, 0xc4, 0xa1, 0x5f, 0xc3, 0xd1, 0xab, 0x8a, 0x6b, 0x7c, 0x9a, 0x0a, 0x9d, 0x1a, 0xd2,
	0xb2, 0xed, 0xf7, 0x39, 0xc9, 0x1d, 0x72, 0x25, 0x03, 0xd2, 0xf6, 0x46, 0x30, 0x78, 0xd1, 0x9c,
	0xf1, 0x39, 0x25, 0xd0, 0x4e, 0x84, 0x74, 0x9d, 0x51, 0xeb, 0xb4, 0xe7, 0xdb, 0x5f, 0xef, 0x7b,
	0xd8, 0x59, 0xde, 0x5e, 0x55, 0xf3, 0x01, 0xf4, 0x94, 0x9c, 0x05, 0x79, 0x1f, 0xe5, 0x85, 0x77,
	0xfd, 0xae, 0x92, 0x45, 0x5f, 0x79, 0x17, 0xb0, 0xbd, 0x8c, 0xb0, 0x49, 0xdf, 0x01, 0x24, 0x2f,
	0x40, 0x39, 0x6d, 0x6b, 0x08, 0x1d, 0xc2, 0x46, 0x6a, 0x98, 0x29, 0x06, 0xe7, 0xc0, 0x2f, 0x16,
	0xde, 0x18, 0xf6, 0x96, 0x69, 0xee, 0x2c, 0x54, 0xed, 0xfe, 0xa2, 0x77, 0xea, 0xfa, 0x21, 0xd0,
	0x15, 0xbd, 0xb5, 0xec, 0x2f, 0x07, 0xe0, 0x97, 0xf3, 0x6b, 0x15, 0x14, 0xb3, 0x77, 0x08, 0x1b,
	0x01, 0x26, 0x26, 0xcc, 0x2b, 0xdc, 0xf6, 0x8b, 0x05, 0x1d, 0x41, 0xff, 0x93, 0x90, 0x0f, 0xa8,
	0x13, 0x2d, 0xa4, 0x71, 0x5b, 0x39, 0x57, 0x87, 0x6c, 0xc1, 0x3c, 0x14, 0x51, 0x30, 0x93, 0x59,
	0xec, 0xb6, 0x73, 0xbe, 0x9b, 0x03, 0xd7, 0x59, 0x4c, 0x8f, 0x00, 0x78, 0xc8, 0x84, 0x9c, 0xe5,
	0x63, 0xa6, 0x33, 0x6a, 0x9d, 0x0e, 0xfc, 0x5e, 0x8e, 0x4c, 0xec, 0x24, 0x39, 0x86, 0x7e, 0x92,
	0x77, 0x15, 0xce, 0xe6, 0xb8, 0x70, 0x37, 0xf2, 0x43, 0x43, 0x09, 0xbd, 0xc7, 0x85, 0x8d, 0x4f,
	0xf2, 0x37, 0x90, 0xf3, 0x9b, 0x39, 0xdf, 0x4b, 0xaa, 0x57, 0xf1, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xba, 0xca, 0x4c, 0xd6, 0xcc, 0x06, 0x00, 0x00,
}
